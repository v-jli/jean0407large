//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
// 
#pragma warning disable 1591

namespace CMS.SharePoint.Imaging
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "ImagingSoap", Namespace = "http://schemas.microsoft.com/sharepoint/soap/ois/")]
    public partial class Imaging : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback ListPictureLibraryOperationCompleted;

        private System.Threading.SendOrPostCallback UploadOperationCompleted;

        private System.Threading.SendOrPostCallback GetItemsXMLDataOperationCompleted;

        private System.Threading.SendOrPostCallback GetItemsByIdsOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteOperationCompleted;

        private System.Threading.SendOrPostCallback DownloadOperationCompleted;

        private System.Threading.SendOrPostCallback EditOperationCompleted;

        private System.Threading.SendOrPostCallback GetListItemsOperationCompleted;

        private System.Threading.SendOrPostCallback CheckSubwebAndListOperationCompleted;

        private System.Threading.SendOrPostCallback RenameOperationCompleted;

        private System.Threading.SendOrPostCallback CreateNewFolderOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public Imaging(string url)
        {
            this.Url = url;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event ListPictureLibraryCompletedEventHandler ListPictureLibraryCompleted;

        /// <remarks/>
        public event UploadCompletedEventHandler UploadCompleted;

        /// <remarks/>
        public event GetItemsXMLDataCompletedEventHandler GetItemsXMLDataCompleted;

        /// <remarks/>
        public event GetItemsByIdsCompletedEventHandler GetItemsByIdsCompleted;

        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;

        /// <remarks/>
        public event DownloadCompletedEventHandler DownloadCompleted;

        /// <remarks/>
        public event EditCompletedEventHandler EditCompleted;

        /// <remarks/>
        public event GetListItemsCompletedEventHandler GetListItemsCompleted;

        /// <remarks/>
        public event CheckSubwebAndListCompletedEventHandler CheckSubwebAndListCompleted;

        /// <remarks/>
        public event RenameCompletedEventHandler RenameCompleted;

        /// <remarks/>
        public event CreateNewFolderCompletedEventHandler CreateNewFolderCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/ListPictureLibrary", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ListPictureLibrary()
        {
            object[] results = this.Invoke("ListPictureLibrary", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void ListPictureLibraryAsync()
        {
            this.ListPictureLibraryAsync(null);
        }

        /// <remarks/>
        public void ListPictureLibraryAsync(object userState)
        {
            if ((this.ListPictureLibraryOperationCompleted == null))
            {
                this.ListPictureLibraryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListPictureLibraryOperationCompleted);
            }
            this.InvokeAsync("ListPictureLibrary", new object[0], this.ListPictureLibraryOperationCompleted, userState);
        }

        private void OnListPictureLibraryOperationCompleted(object arg)
        {
            if ((this.ListPictureLibraryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListPictureLibraryCompleted(this, new ListPictureLibraryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/Upload", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Upload(string strListName, string strFolder, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] bytes, string fileName, bool fOverWriteIfExist)
        {
            object[] results = this.Invoke("Upload", new object[] {
                        strListName,
                        strFolder,
                        bytes,
                        fileName,
                        fOverWriteIfExist});
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void UploadAsync(string strListName, string strFolder, byte[] bytes, string fileName, bool fOverWriteIfExist)
        {
            this.UploadAsync(strListName, strFolder, bytes, fileName, fOverWriteIfExist, null);
        }

        /// <remarks/>
        public void UploadAsync(string strListName, string strFolder, byte[] bytes, string fileName, bool fOverWriteIfExist, object userState)
        {
            if ((this.UploadOperationCompleted == null))
            {
                this.UploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadOperationCompleted);
            }
            this.InvokeAsync("Upload", new object[] {
                        strListName,
                        strFolder,
                        bytes,
                        fileName,
                        fOverWriteIfExist}, this.UploadOperationCompleted, userState);
        }

        private void OnUploadOperationCompleted(object arg)
        {
            if ((this.UploadCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCompleted(this, new UploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/GetItemsXMLData", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetItemsXMLData(string strListName, string strFolder, string[] itemFileNames)
        {
            object[] results = this.Invoke("GetItemsXMLData", new object[] {
                        strListName,
                        strFolder,
                        itemFileNames});
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void GetItemsXMLDataAsync(string strListName, string strFolder, string[] itemFileNames)
        {
            this.GetItemsXMLDataAsync(strListName, strFolder, itemFileNames, null);
        }

        /// <remarks/>
        public void GetItemsXMLDataAsync(string strListName, string strFolder, string[] itemFileNames, object userState)
        {
            if ((this.GetItemsXMLDataOperationCompleted == null))
            {
                this.GetItemsXMLDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsXMLDataOperationCompleted);
            }
            this.InvokeAsync("GetItemsXMLData", new object[] {
                        strListName,
                        strFolder,
                        itemFileNames}, this.GetItemsXMLDataOperationCompleted, userState);
        }

        private void OnGetItemsXMLDataOperationCompleted(object arg)
        {
            if ((this.GetItemsXMLDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsXMLDataCompleted(this, new GetItemsXMLDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/GetItemsByIds", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetItemsByIds(string strListName, uint[] ids)
        {
            object[] results = this.Invoke("GetItemsByIds", new object[] {
                        strListName,
                        ids});
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void GetItemsByIdsAsync(string strListName, uint[] ids)
        {
            this.GetItemsByIdsAsync(strListName, ids, null);
        }

        /// <remarks/>
        public void GetItemsByIdsAsync(string strListName, uint[] ids, object userState)
        {
            if ((this.GetItemsByIdsOperationCompleted == null))
            {
                this.GetItemsByIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsByIdsOperationCompleted);
            }
            this.InvokeAsync("GetItemsByIds", new object[] {
                        strListName,
                        ids}, this.GetItemsByIdsOperationCompleted, userState);
        }

        private void OnGetItemsByIdsOperationCompleted(object arg)
        {
            if ((this.GetItemsByIdsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsByIdsCompleted(this, new GetItemsByIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/Delete", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Delete(string strListName, string strFolder, string[] itemFileNames)
        {
            object[] results = this.Invoke("Delete", new object[] {
                        strListName,
                        strFolder,
                        itemFileNames});
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void DeleteAsync(string strListName, string strFolder, string[] itemFileNames)
        {
            this.DeleteAsync(strListName, strFolder, itemFileNames, null);
        }

        /// <remarks/>
        public void DeleteAsync(string strListName, string strFolder, string[] itemFileNames, object userState)
        {
            if ((this.DeleteOperationCompleted == null))
            {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        strListName,
                        strFolder,
                        itemFileNames}, this.DeleteOperationCompleted, userState);
        }

        private void OnDeleteOperationCompleted(object arg)
        {
            if ((this.DeleteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/Download", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Download(string strListName, string strFolder, string[] itemFileNames, uint type, bool fFetchOriginalIfNotAvailable)
        {
            object[] results = this.Invoke("Download", new object[] {
                        strListName,
                        strFolder,
                        itemFileNames,
                        type,
                        fFetchOriginalIfNotAvailable});
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void DownloadAsync(string strListName, string strFolder, string[] itemFileNames, uint type, bool fFetchOriginalIfNotAvailable)
        {
            this.DownloadAsync(strListName, strFolder, itemFileNames, type, fFetchOriginalIfNotAvailable, null);
        }

        /// <remarks/>
        public void DownloadAsync(string strListName, string strFolder, string[] itemFileNames, uint type, bool fFetchOriginalIfNotAvailable, object userState)
        {
            if ((this.DownloadOperationCompleted == null))
            {
                this.DownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadOperationCompleted);
            }
            this.InvokeAsync("Download", new object[] {
                        strListName,
                        strFolder,
                        itemFileNames,
                        type,
                        fFetchOriginalIfNotAvailable}, this.DownloadOperationCompleted, userState);
        }

        private void OnDownloadOperationCompleted(object arg)
        {
            if ((this.DownloadCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadCompleted(this, new DownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/Edit", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Edit(string strListName, string strFolder, string itemFileName, System.Xml.XmlElement recipe)
        {
            object[] results = this.Invoke("Edit", new object[] {
                        strListName,
                        strFolder,
                        itemFileName,
                        recipe});
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void EditAsync(string strListName, string strFolder, string itemFileName, System.Xml.XmlElement recipe)
        {
            this.EditAsync(strListName, strFolder, itemFileName, recipe, null);
        }

        /// <remarks/>
        public void EditAsync(string strListName, string strFolder, string itemFileName, System.Xml.XmlElement recipe, object userState)
        {
            if ((this.EditOperationCompleted == null))
            {
                this.EditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditOperationCompleted);
            }
            this.InvokeAsync("Edit", new object[] {
                        strListName,
                        strFolder,
                        itemFileName,
                        recipe}, this.EditOperationCompleted, userState);
        }

        private void OnEditOperationCompleted(object arg)
        {
            if ((this.EditCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditCompleted(this, new EditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/GetListItems", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetListItems(string strListName, string strFolder)
        {
            object[] results = this.Invoke("GetListItems", new object[] {
                        strListName,
                        strFolder});
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void GetListItemsAsync(string strListName, string strFolder)
        {
            this.GetListItemsAsync(strListName, strFolder, null);
        }

        /// <remarks/>
        public void GetListItemsAsync(string strListName, string strFolder, object userState)
        {
            if ((this.GetListItemsOperationCompleted == null))
            {
                this.GetListItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListItemsOperationCompleted);
            }
            this.InvokeAsync("GetListItems", new object[] {
                        strListName,
                        strFolder}, this.GetListItemsOperationCompleted, userState);
        }

        private void OnGetListItemsOperationCompleted(object arg)
        {
            if ((this.GetListItemsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListItemsCompleted(this, new GetListItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/CheckSubwebAndList", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CheckSubwebAndList(string strUrl)
        {
            object[] results = this.Invoke("CheckSubwebAndList", new object[] {
                        strUrl});
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void CheckSubwebAndListAsync(string strUrl)
        {
            this.CheckSubwebAndListAsync(strUrl, null);
        }

        /// <remarks/>
        public void CheckSubwebAndListAsync(string strUrl, object userState)
        {
            if ((this.CheckSubwebAndListOperationCompleted == null))
            {
                this.CheckSubwebAndListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSubwebAndListOperationCompleted);
            }
            this.InvokeAsync("CheckSubwebAndList", new object[] {
                        strUrl}, this.CheckSubwebAndListOperationCompleted, userState);
        }

        private void OnCheckSubwebAndListOperationCompleted(object arg)
        {
            if ((this.CheckSubwebAndListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSubwebAndListCompleted(this, new CheckSubwebAndListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/Rename", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Rename(string strListName, string strFolder, System.Xml.XmlElement request)
        {
            object[] results = this.Invoke("Rename", new object[] {
                        strListName,
                        strFolder,
                        request});
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void RenameAsync(string strListName, string strFolder, System.Xml.XmlElement request)
        {
            this.RenameAsync(strListName, strFolder, request, null);
        }

        /// <remarks/>
        public void RenameAsync(string strListName, string strFolder, System.Xml.XmlElement request, object userState)
        {
            if ((this.RenameOperationCompleted == null))
            {
                this.RenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameOperationCompleted);
            }
            this.InvokeAsync("Rename", new object[] {
                        strListName,
                        strFolder,
                        request}, this.RenameOperationCompleted, userState);
        }

        private void OnRenameOperationCompleted(object arg)
        {
            if ((this.RenameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameCompleted(this, new RenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/ois/CreateNewFolder", RequestNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", ResponseNamespace = "http://schemas.microsoft.com/sharepoint/soap/ois/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CreateNewFolder(string strListName, string strParentFolder)
        {
            object[] results = this.Invoke("CreateNewFolder", new object[] {
                        strListName,
                        strParentFolder});
            return ((System.Xml.XmlNode)(results[0]));
        }

        /// <remarks/>
        public void CreateNewFolderAsync(string strListName, string strParentFolder)
        {
            this.CreateNewFolderAsync(strListName, strParentFolder, null);
        }

        /// <remarks/>
        public void CreateNewFolderAsync(string strListName, string strParentFolder, object userState)
        {
            if ((this.CreateNewFolderOperationCompleted == null))
            {
                this.CreateNewFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewFolderOperationCompleted);
            }
            this.InvokeAsync("CreateNewFolder", new object[] {
                        strListName,
                        strParentFolder}, this.CreateNewFolderOperationCompleted, userState);
        }

        private void OnCreateNewFolderOperationCompleted(object arg)
        {
            if ((this.CreateNewFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewFolderCompleted(this, new CreateNewFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ListPictureLibraryCompletedEventHandler(object sender, ListPictureLibraryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListPictureLibraryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListPictureLibraryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UploadCompletedEventHandler(object sender, UploadCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetItemsXMLDataCompletedEventHandler(object sender, GetItemsXMLDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsXMLDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetItemsXMLDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetItemsByIdsCompletedEventHandler(object sender, GetItemsByIdsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsByIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetItemsByIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteCompletedEventHandler(object sender, DeleteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DownloadCompletedEventHandler(object sender, DownloadCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void EditCompletedEventHandler(object sender, EditCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal EditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetListItemsCompletedEventHandler(object sender, GetListItemsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetListItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckSubwebAndListCompletedEventHandler(object sender, CheckSubwebAndListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSubwebAndListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckSubwebAndListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RenameCompletedEventHandler(object sender, RenameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CreateNewFolderCompletedEventHandler(object sender, CreateNewFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateNewFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Xml.XmlNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591